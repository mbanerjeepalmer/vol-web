/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/catalogue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Catalogues
         * @description Returns all the user's catalogues.
         *     If you need to get all catalogues, use /catalogue/all.
         */
        get: operations["get_user_catalogues_catalogue_get"];
        put?: never;
        /** Create Catalogue */
        post: operations["create_catalogue_catalogue_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Catalogues
         * @description Retrieve all catalogues.
         *     Only accessible by users with admin role.
         */
        get: operations["get_all_catalogues_catalogue_all_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/aggregated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Aggregated Catalogues */
        get: operations["get_aggregated_catalogues_catalogue_aggregated_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/{catalogue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Catalogue */
        get: operations["get_catalogue_catalogue__catalogue_id__get"];
        put?: never;
        post?: never;
        /** Delete Catalogue */
        delete: operations["delete_catalogue_catalogue__catalogue_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/{catalogue_id}/opml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Catalogue Opml */
        get: operations["get_catalogue_opml_catalogue__catalogue_id__opml_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/{catalogue_id}/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Catalogue Feeds
         * @description Returns feeds associated with a catalogue.
         *
         *     If items_count > 0, limits each feed to that many items.
         */
        get: operations["get_catalogue_feeds_catalogue__catalogue_id__feed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/{catalogue_id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Catalogue Items
         * @description Returns a flat list of Items that are linked to Feeds associated with the given
         *     Catalogue.
         *
         *     An Item is considered 'classified' if it is linked via a feed of type OUTPUT.
         *
         *     Filtering can be applied:
         *       - classified_only=True: only return classified items,
         *       - classified_only=False: only return unclassified items,
         *       - classified_only=None: return both.
         *     The limit `count` applies to the total number of items returned.
         */
        get: operations["get_catalogue_items_catalogue__catalogue_id__item_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue-mega/{catalogue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mega Catalogue
         * @description Retrieve a mega catalogue with all its related data.
         */
        get: operations["get_mega_catalogue_catalogue_mega__catalogue_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue-mega-async": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Mega Catalogue Async
         * @description Create a catalogue, groups and output feeds immediately, then trigger a
         *     background task for creating input feeds.
         */
        post: operations["create_mega_catalogue_async_catalogue_mega_async_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Feeds */
        get: operations["get_feeds_feed_get"];
        /**
         * Get Or Create Feed
         * @description Get or create a feed using the URLs (`href` and `link`).
         *
         *     Does not sync items.
         */
        put: operations["get_or_create_feed_feed_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/output": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Output Feed
         * @description Checks the catalogue belongs to this user, or that the user is an admin.
         *     Ensures there isn't already a feed with this title.
         */
        post: operations["create_output_feed_feed_output_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/input": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Or Create Input Feed
         * @description Creates a new input feed. Makes a request but doesn't sync it.
         */
        post: operations["get_or_create_input_feed_feed_input_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/input/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create And Sync Input Feeds
         * @description Creates a new input feed.
         *     - If the 'require_unique_link' is false then you can have the same link for two
         *       feeds. This can be useful in case you have an RSS and Atom feed for the same page
         *       or different feeds have different parameters that aren't reflected on the HTML
         *       site.
         */
        post: operations["create_and_sync_input_feeds_feed_input_trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}/catalogue/{catalogue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add Feed To Catalogue */
        put: operations["add_feed_to_catalogue_feed__feed_id__catalogue__catalogue_id__put"];
        post?: never;
        /**
         * Remove Feed From Catalogue
         * @description Disassociate a feed from a catalogue.
         *
         *     - Requires authentication
         *     - User must own the catalogue or be an admin
         *     - Returns the updated feed
         *     - Raises 404 if feed or catalogue not found
         *     - Raises 403 if user lacks permissions
         */
        delete: operations["remove_feed_from_catalogue_feed__feed_id__catalogue__catalogue_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feed
         * @description First check in-memory store then check DB.
         */
        get: operations["get_feed_feed__feed_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Feed
         * @description Update an existing feed.
         *
         *     - Requires authentication
         *     - User must own the feed or be an admin
         *     - Allows partial updates to feed metadata
         */
        patch: operations["update_feed_feed__feed_id__patch"];
        trace?: never;
    };
    "/feed/{feed_id}/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Feed Data */
        get: operations["get_feed_data_feed__feed_id__data_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}/rss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feed Rss
         * @description Returns a valid RSS feed for a given feed ID.
         *
         *     Retrieves the feed and its associated items, then generates an RSS feed.
         */
        get: operations["get_feed_rss_feed__feed_id__rss_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}/atom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feed Atom
         * @description Returns a valid Atom feed for a given feed ID.
         *
         *     Retrieves the feed and its associated items, then generates an Atom feed.
         */
        get: operations["get_feed_atom_feed__feed_id__atom_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}/json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Feed Json
         * @description Returns a valid JSON feed for a given feed ID.
         *
         *     Retrieves the feed and its associated items, then generates a JSON feed.
         */
        get: operations["get_feed_json_feed__feed_id__json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Feed Items */
        get: operations["get_feed_items_feed__feed_id__item_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/{feed_id}/synced/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger Sync Feed */
        post: operations["trigger_sync_feed_feed__feed_id__synced_trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/synced": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync All Feeds
         * @description "
         *     NOTE: feedparser uses `href` and `link` for feeds, but only `link` (and `links`) for
         *      entries.
         */
        post: operations["sync_all_feeds_feed_synced_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed/synced/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger All Feeds Sync */
        post: operations["trigger_all_feeds_sync_feed_synced_trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/classified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Classify All Catalogues */
        post: operations["classify_all_catalogues_catalogue_classified_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/{catalogue_id}/classified/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger Classify Catalogue */
        post: operations["trigger_classify_catalogue_catalogue__catalogue_id__classified_trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/{catalogue_id}/classified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Classify Catalogue
         * @description Classifies items in a catalogue.
         *
         *     Which items it classifies
         *     - If `items_body.item_ids` is provided it will classify those exact items.
         *         - It will reclassify if they have already been classified
         *         - It will not classify if they don't belong to input feeds attached to this
         *           catalogue.
         *     - If `after` is provided it classifies items from this catalogue's input feeds
         *       that were either published or created after that date.
         *     - If `after` is not provided it defaults to the last 24h.
         *     - `after` and `items_body` can't both be provided.
         *
         *     Place newly classified items into the output feeds that match their groups.
         */
        post: operations["classify_catalogue_catalogue__catalogue_id__classified_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalogue/classified/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger All Catalogues Classification */
        post: operations["trigger_all_catalogues_classification_catalogue_classified_trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed-items-from-opml/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Feed Items From Opml File
         * @description Process OPML from uploaded file and return feed items.
         */
        post: operations["feed_items_from_opml_file_feed_items_from_opml_file_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feed-items-from-opml/string": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Feed Items From Opml String
         * @description Process OPML from string content and return feed items.
         */
        post: operations["feed_items_from_opml_string_feed_items_from_opml_string_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root_hc_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stripe Webhook
         * @description Stripe webhook endpoint to receive and log webhook events.
         *
         *     This endpoint:
         *     - Verifies the webhook signature
         *     - Logs all incoming events
         *     - Processes subscription-related events
         *     - Returns a 200 OK response
         */
        post: operations["stripe_webhook_stripe_webhook_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/who-is-it": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Who Is It */
        get: operations["who_is_it_who_is_it_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/sync-stripe-subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Stripe Subscription Sync
         * @description Bulk sync Stripe subscriptions, replacing all existing records.
         */
        post: operations["bulk_stripe_subscription_sync_admin_sync_stripe_subscriptions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users */
        get: operations["get_users_user_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{user_id}/catalogue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete User Catalogues */
        delete: operations["delete_user_catalogues_user__user_id__catalogue_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/spotify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Spotify Search */
        get: operations["get_spotify_search_search_spotify_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/podchaser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Podchaser Search */
        get: operations["get_podchaser_search_search_podchaser_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Own User */
        get: operations["get_own_user_user_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AggregatedCatalogueResponse
         * @description This is basically for analytics.
         */
        AggregatedCatalogueResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Name */
            name?: string | null;
            user: components["schemas"]["UserMinimalResponse"];
            /** Input Feeds Count */
            input_feeds_count: number;
            /** Output Feeds Count */
            output_feeds_count: number;
        };
        /** AggregatedCataloguesResponse */
        AggregatedCataloguesResponse: {
            /** Catalogues */
            catalogues: components["schemas"]["AggregatedCatalogueResponse"][];
            /** Count */
            count: number;
        };
        /** Body_create_mega_catalogue_async_catalogue_mega_async_post */
        Body_create_mega_catalogue_async_catalogue_mega_async_post: {
            catalogue: components["schemas"]["CatalogueCreate"];
            /** Input Feeds */
            input_feeds: components["schemas"]["FeedCreate"][];
            /** Output Feeds */
            output_feeds: components["schemas"]["OutputDefinition"][];
        };
        /** Body_feed_items_from_opml_file_feed_items_from_opml_file_post */
        Body_feed_items_from_opml_file_feed_items_from_opml_file_post: {
            /**
             * Opml File
             * Format: binary
             */
            opml_file: string;
            /** Item Limit */
            item_limit?: number | null;
            /** Feed Limit */
            feed_limit?: number | null;
        };
        /** Catalogue */
        Catalogue: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Name */
            name: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
        };
        /** CatalogueCreate */
        CatalogueCreate: {
            /** Name */
            name: string;
            /** User Id */
            user_id?: string | null;
        };
        /** Feed */
        Feed: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Href */
            href: string;
            /** Link */
            link: string | null;
            /** Title */
            title: string;
            /** Description */
            description: string | null;
            /** Logo */
            logo: string | null;
            feed_type: components["schemas"]["FeedType"];
            /** Last Polled */
            last_polled: string | null;
            polling_available: components["schemas"]["PollingAvailable"];
            /** Publisher Updated At */
            publisher_updated_at: string | null;
            /** User Id */
            user_id: string | null;
        };
        /**
         * FeedCreate
         * @description Note that `href` is the final URL of the feed.
         *     Whereas for `link` it is the URL of the HTML page associated with the feed.
         *
         *     For now it's fine if they're the same. But that might change in future.
         */
        FeedCreate: {
            /** Href */
            href: string;
            /** Link */
            link?: string | null;
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** Logo */
            logo?: string | null;
            feed_type?: components["schemas"]["FeedType"] | null;
            /** @default always */
            polling_available: components["schemas"]["PollingAvailable"];
        };
        /**
         * FeedFormat
         * @enum {string}
         */
        FeedFormat: "data" | "rss" | "atom" | "json_feed";
        /** FeedItemsResponse */
        FeedItemsResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Href */
            href: string;
            /** Link */
            link?: string | null;
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Logo */
            logo?: string | null;
            feed_type: components["schemas"]["FeedType"];
            /** Last Polled */
            last_polled?: string | null;
            /** Publisher Updated At */
            publisher_updated_at?: string | null;
            /** Items */
            items?: components["schemas"]["Item"][] | null;
        };
        /** FeedResponse */
        FeedResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Href */
            href: string;
            /** Link */
            link?: string | null;
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Logo */
            logo?: string | null;
            feed_type: components["schemas"]["FeedType"];
            /** Last Polled */
            last_polled?: string | null;
            /** Publisher Updated At */
            publisher_updated_at?: string | null;
        };
        /**
         * FeedType
         * @enum {string}
         */
        FeedType: "input" | "output";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Item */
        Item: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Title */
            title: string;
            /** Link */
            link: string;
            /** Type */
            type: string | null;
            /** Published At */
            published_at: string | null;
            /** Publisher Summary */
            publisher_summary: string | null;
            /** Preview Image */
            preview_image: string | null;
        };
        /** ItemIDs */
        ItemIDs: {
            /** Item Ids */
            item_ids: string[];
        };
        /** ItemWithOutputFeeds */
        ItemWithOutputFeeds: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Title */
            title: string;
            /** Link */
            link: string;
            /** Type */
            type: string;
            /** Published At */
            published_at: string | null;
            /** Publisher Summary */
            publisher_summary: string | null;
            /** Preview Image */
            preview_image: string | null;
            /** Output Feed Ids */
            output_feed_ids: string[] | null;
        };
        /** ItemsResponse */
        ItemsResponse: {
            /** Items */
            items: components["schemas"]["ItemWithOutputFeeds"][];
        };
        /**
         * MegaCatalogueResponse
         * @description Catalogue, its sub entities
         */
        MegaCatalogueResponse: {
            catalogue: components["schemas"]["Catalogue"];
            /** Input Feeds */
            input_feeds: components["schemas"]["FeedResponse"][];
            /** Output Feeds */
            output_feeds: components["schemas"]["FeedResponse"][];
        };
        /**
         * OPMLContent
         * @description Just to force FastAPI to ask for POST body.
         */
        OPMLContent: {
            /** Content String */
            content_string: string;
        };
        /** OutputDefinition */
        OutputDefinition: {
            /** Title */
            title: string;
            /** Description */
            description: string;
        };
        /**
         * PollingAvailable
         * @enum {string}
         */
        PollingAvailable: "always" | "manual" | "never";
        /**
         * SortOrder
         * @enum {string}
         */
        SortOrder: "asc" | "desc" | "random";
        /** SubscriptionResponse */
        SubscriptionResponse: {
            status: components["schemas"]["SubscriptionStatus"];
        };
        /**
         * SubscriptionStatus
         * @enum {string}
         */
        SubscriptionStatus: "incomplete" | "incomplete_expired" | "trialing" | "active" | "past_due" | "canceled" | "unpaid" | "paused";
        /** UserMinimalResponse */
        UserMinimalResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Email */
            email?: string | null;
        };
        /** UserResponse */
        UserResponse: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name?: string | null;
            /** Email */
            email?: string | null;
            /** Image */
            image?: string | null;
            /** Subscriptions */
            subscriptions: components["schemas"]["SubscriptionResponse"][];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_user_catalogues_catalogue_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_catalogue_catalogue_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CatalogueCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Catalogue"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_catalogues_catalogue_all_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_aggregated_catalogues_catalogue_aggregated_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AggregatedCataloguesResponse"];
                };
            };
        };
    };
    get_catalogue_catalogue__catalogue_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_catalogue_catalogue__catalogue_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_catalogue_opml_catalogue__catalogue_id__opml_get: {
        parameters: {
            query?: {
                feed_format?: components["schemas"]["FeedFormat"];
            };
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_catalogue_feeds_catalogue__catalogue_id__feed_get: {
        parameters: {
            query?: {
                feed_types?: components["schemas"]["FeedType"][];
                items_count?: number;
            };
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedItemsResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_catalogue_items_catalogue__catalogue_id__item_get: {
        parameters: {
            query?: {
                count?: number;
                classified_only?: boolean | null;
                sort?: components["schemas"]["SortOrder"];
            };
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mega_catalogue_catalogue_mega__catalogue_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MegaCatalogueResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mega_catalogue_async_catalogue_mega_async_post: {
        parameters: {
            query?: {
                everything_else?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_create_mega_catalogue_async_catalogue_mega_async_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feeds_feed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_or_create_feed_feed_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_output_feed_feed_output_post: {
        parameters: {
            query: {
                catalogue_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OutputDefinition"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feed"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_or_create_input_feed_feed_input_post: {
        parameters: {
            query?: {
                catalogue_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedItemsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_and_sync_input_feeds_feed_input_trigger_post: {
        parameters: {
            query?: {
                catalogue_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedCreate"][];
            };
        };
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_feed_to_catalogue_feed__feed_id__catalogue__catalogue_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feed_id: string;
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_feed_from_catalogue_feed__feed_id__catalogue__catalogue_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feed_id: string;
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feed_feed__feed_id__get: {
        parameters: {
            query?: {
                items_count?: number;
                format?: components["schemas"]["FeedFormat"];
            };
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_feed_feed__feed_id__patch: {
        parameters: {
            query?: {
                catalogue_id?: string | null;
            };
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feed"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feed_data_feed__feed_id__data_get: {
        parameters: {
            query?: {
                items_count?: number;
            };
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedItemsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feed_rss_feed__feed_id__rss_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feed_atom_feed__feed_id__atom_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feed_json_feed__feed_id__json_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_feed_items_feed__feed_id__item_get: {
        parameters: {
            query?: {
                count?: number;
            };
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_sync_feed_feed__feed_id__synced_trigger_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                feed_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sync_all_feeds_feed_synced_post: {
        parameters: {
            query?: {
                catalogue_id?: string | null;
                paid_tier_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_all_feeds_sync_feed_synced_trigger_post: {
        parameters: {
            query?: {
                catalogue_id?: string | null;
                paid_tier_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    classify_all_catalogues_catalogue_classified_post: {
        parameters: {
            query?: {
                paid_tier_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_classify_catalogue_catalogue__catalogue_id__classified_trigger_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemIDs"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    classify_catalogue_catalogue__catalogue_id__classified_post: {
        parameters: {
            query?: {
                after?: string | null;
                batch_size?: number;
            };
            header?: never;
            path: {
                catalogue_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemIDs"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    trigger_all_catalogues_classification_catalogue_classified_trigger_post: {
        parameters: {
            query?: {
                paid_tier_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    feed_items_from_opml_file_feed_items_from_opml_file_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_feed_items_from_opml_file_feed_items_from_opml_file_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    feed_items_from_opml_string_feed_items_from_opml_string_post: {
        parameters: {
            query?: {
                item_limit?: number | null;
                feed_limit?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OPMLContent"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root_hc_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    stripe_webhook_stripe_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    who_is_it_who_is_it_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    bulk_stripe_subscription_sync_admin_sync_stripe_subscriptions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_users_user_get: {
        parameters: {
            query?: {
                paid_tier_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_catalogues_user__user_id__catalogue_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_spotify_search_search_spotify_get: {
        parameters: {
            query: {
                query: string;
                markets?: string[] | null;
                limit?: number;
                offset?: number;
                format?: components["schemas"]["FeedFormat"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_podchaser_search_search_podchaser_get: {
        parameters: {
            query: {
                query: string;
                format?: components["schemas"]["FeedFormat"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_own_user_user_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
}
